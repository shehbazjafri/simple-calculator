{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","currentOperand","setCurrentOperand","_useState3","_useState4","infixStack","setInfixStack","isOperator","val","getPrecedence","operator","/","*","+","-","isOperand","isNaN","evaluate","push","postfix","operandStack","forEach","b","Number","pop","res","a","compute","evaulatePostfix","infix","outputStack","operatorStack","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","currentChar","value","length","topOperator","popped","err","return","op","getPostfixFromInfix","replaceLastIndexWith","newExp","toConsumableArray","inputOperator","concat","replacedOperatorExp","inputNumber","number","toString","includes","react_default","createElement","className","id","join","intDisplay","strNum","intDigits","parseFloat","split","decDigits","toLocaleString","maximumFractionDigits","getDisplayNumber","onClick","result","equals","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c80f0616.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/App.css\";\n\nfunction App() {\n  const [currentOperand, setCurrentOperand] = useState(0);\n  const [infixStack, setInfixStack] = useState([]);\n\n  const clear = () => {\n    setCurrentOperand(0);\n    setInfixStack([]);\n  };\n\n  const isOperator = val => {\n    return val === \"+\" || val === \"-\" || val === \"*\" || val === \"/\";\n  };\n\n  const getPrecedence = operator => {\n    const precedence = {\n      \"/\": 10,\n      \"*\": 10,\n      \"+\": 5,\n      \"-\": 5\n    };\n    return precedence[operator];\n  };\n\n  const isOperand = val => {\n    return !isNaN(val);\n  };\n\n  const getPostfixFromInfix = () => {\n    const infix = infixStack;\n    const outputStack = [];\n    const operatorStack = [];\n    for (let currentChar of infix) {\n      if (isOperand(currentChar)) {\n        outputStack.push(currentChar);\n      } else if (isOperator(currentChar) && operatorStack.length === 0) {\n        operatorStack.push(currentChar);\n      } else {\n        const topOperator = operatorStack[operatorStack.length - 1];\n        if (getPrecedence(currentChar) > getPrecedence(topOperator)) {\n          operatorStack.push(currentChar);\n        } else if (getPrecedence(currentChar) <= getPrecedence(topOperator)) {\n          do {\n            const popped = operatorStack.pop();\n            outputStack.push(popped);\n          } while (\n            getPrecedence(operatorStack[operatorStack.length - 1]) <=\n            getPrecedence(currentChar)\n          );\n          operatorStack.push(currentChar);\n        }\n      }\n    }\n    if (operatorStack) {\n      while (operatorStack.length !== 0) {\n        const op = operatorStack.pop();\n        outputStack.push(op);\n      }\n    }\n    return outputStack;\n  };\n\n  const compute = (a, b, operator) => {\n    switch (operator) {\n      case \"+\":\n        return a + b;\n      case \"-\":\n        return a - b;\n      case \"*\":\n        return a * b;\n      case \"/\":\n        return a / b;\n      default:\n    }\n  };\n\n  const evaulatePostfix = postfix => {\n    const operandStack = [];\n    postfix.forEach(val => {\n      if (isOperand(val)) {\n        operandStack.push(val);\n      } else if (isOperator(val)) {\n        const b = Number(operandStack.pop());\n        const a = Number(operandStack.pop());\n        const res = compute(a, b, val);\n        operandStack.push(res);\n      }\n    });\n    return operandStack.pop();\n  };\n\n  const evaluate = () => {\n    if (currentOperand) {\n      infixStack.push(currentOperand);\n    }\n    const postfix = getPostfixFromInfix();\n    return evaulatePostfix(postfix);\n  };\n\n  const replaceLastIndexWith = val => {\n    const newExp = [...infixStack];\n    newExp.pop();\n    newExp.push(val);\n    return newExp;\n  };\n\n  // TODO : Improve this function\n  const inputOperator = operator => {\n    if (currentOperand === \"\") {\n      // Current operand becomes blank when an operator is added after a number\n      if (operator === \"-\") {\n        // For negative sign, set the sign to current operand so a number can be appended.\n        setCurrentOperand(\"-\");\n      } else {\n        // Replace the last operator with new operator when it's not \"-\" sign.\n        const replacedOperatorExp = replaceLastIndexWith(operator);\n        setInfixStack(replacedOperatorExp);\n      }\n      return;\n    }\n\n    // When another operator is added after a negative sign, remove both previous operator and negative sign,\n    // and add the new operator (replacing both preceding signs eg. 5*-+5 === 5+5)\n    if (currentOperand === \"-\") {\n      const newExp = replaceLastIndexWith(operator);\n      setInfixStack(newExp);\n      setCurrentOperand(\"\");\n      return;\n    }\n    setInfixStack([...infixStack, currentOperand, operator]);\n    setCurrentOperand(\"\");\n  };\n\n  const getDisplayNumber = number => {\n    if (number === \"-\") {\n      return number;\n    }\n    const strNum = number.toString();\n    const intDigits = parseFloat(strNum.split(\".\"));\n    const decDigits = strNum.split(\".\")[1];\n    let intDisplay;\n    if (isNaN(intDigits)) {\n      intDisplay = \"\";\n    } else {\n      intDisplay = intDigits.toLocaleString(\"en\", {\n        maximumFractionDigits: 0\n      });\n    }\n    if (decDigits != null) {\n      return `${intDisplay}.${decDigits}`;\n    } else {\n      return intDisplay;\n    }\n  };\n\n  const inputNumber = number => {\n    if (number === \".\" && currentOperand.toString().includes(\".\")) return;\n    if (currentOperand === 0) {\n      setCurrentOperand(number + \"\");\n    } else {\n      setCurrentOperand(currentOperand + \"\" + number);\n    }\n  };\n\n  const getDisplayExpression = () => {\n    return infixStack.join(\"\");\n  };\n\n  const equals = () => {\n    if (currentOperand === 0) {\n      return;\n    }\n    const result = evaluate();\n    setCurrentOperand(result);\n    setInfixStack([]);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"calculator\">\n        <div id=\"display\" className=\"display\">\n          <div className=\"expression\">{getDisplayExpression()}</div>\n          <div className=\"current-operand\">\n            {getDisplayNumber(currentOperand)}\n          </div>\n        </div>\n        <button id=\"clear\" onClick={clear}>\n          AC\n        </button>\n        <button id=\"divide\" onClick={() => inputOperator(\"/\")}>\n          ÷\n        </button>\n        <button id=\"multiply\" onClick={() => inputOperator(\"*\")}>\n          X\n        </button>\n        <button id=\"seven\" onClick={() => inputNumber(7)}>\n          7\n        </button>\n        <button id=\"eight\" onClick={() => inputNumber(8)}>\n          8\n        </button>\n        <button id=\"nine\" onClick={() => inputNumber(9)}>\n          9\n        </button>\n        <button id=\"subtract\" onClick={() => inputOperator(\"-\")}>\n          -\n        </button>\n        <button id=\"four\" onClick={() => inputNumber(4)}>\n          4\n        </button>\n        <button id=\"five\" onClick={() => inputNumber(5)}>\n          5\n        </button>\n        <button id=\"six\" onClick={() => inputNumber(6)}>\n          6\n        </button>\n        <button id=\"add\" onClick={() => inputOperator(\"+\")}>\n          +\n        </button>\n        <button id=\"one\" onClick={() => inputNumber(1)}>\n          1\n        </button>\n        <button id=\"two\" onClick={() => inputNumber(2)}>\n          2\n        </button>\n        <button id=\"three\" onClick={() => inputNumber(3)}>\n          3\n        </button>\n        <button id=\"equals\" onClick={() => equals()}>\n          =\n        </button>\n        <button id=\"zero\" onClick={() => inputNumber(0)}>\n          0\n        </button>\n        <button id=\"decimal\" onClick={() => inputNumber(\".\")}>\n          .\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}